<%

if not @library
	@library = Library.find_by_url_friendly_name(params[:lib])
end

current_ns = params[:ns]

if @library

	require 'tree'
	_nss = Function.find(:all, :conditions => {:library => @library.name}, :select => 'distinct(ns),ns').map(&:ns).sort
	
	@ns_flat_list = _nss

	_nss = _nss.map do |ns|
		ns.split(".")
	end

	out = {}

	def treeify(root, splits)

		splits.each do |s|
			parent = root
			s.each do |part|
				current = parent[part]
				if not current
					ns = []
					up_node = parent
					begin
						ns << up_node.name
						up_node = up_node.parent
					end while not up_node == nil
					current = Tree::TreeNode.new(part, ns.reverse[1..-1].join(".") + "." + part)
					parent << current
				end

				parent = current
			end		
		end
		root
	end

	def generate_level(lib, current_ns, root)
	%>
		<ul>
			<%
			root.children.each do |c|
				ns = []
				parent = c
				while parent.children.size == 1 and not @ns_flat_list.index(parent.content)
					ns << parent.name
					parent = parent[0]
				end
				c = parent
				ns << c.name
				ns = ns.join(".")
				%>

				<% if @ns_flat_list.index(c.content) %>
				<li>
					<span<%= (current_ns == c.content ? " class=\"current_ns\"" : "")%>>
					<%= link_to ns,
								:controller => 'main',
								:action => 'ns',
								:lib => lib.url_friendly_name,
								:version => (params[:version] ? params[:version] : lib.version),
								:ns => c.content %>
					</span>
					<% if c.children.size > 0 then generate_level(lib, current_ns, c) end %>
						</li>
					<% else %>
						<li>
							<%= if ns.size <= 22 then ns else ("..." + ns[ns.size-22, ns.size]) end %>
							<% if c.children.size > 0 then generate_level(lib, current_ns, c) end %>
						</li>
					<% end %>
				<% end %>
		</ul>
	<%
	end

_nss = treeify(Tree::TreeNode.new("ROOT", "root node"), _nss)

%>
<div class="namespaces">
	<h3>Namespaces</h3>
	<% generate_level(@library, current_ns, _nss) %>
</div>
<% end %>