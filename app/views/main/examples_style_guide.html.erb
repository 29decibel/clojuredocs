<div class="container_16">
<div class="grid_14 prefix_1 suffix_1">
<div class="examples_style_guide">
<h1>ClojureDocs Example Submission Guidelines</h1> 
 
<h2>Overview</h2> 
 
<p>The example sections on each var page are there to provide simple, isolated examples of var usage.  In a nutshell, the examples you add to Clojuredocs should be easy to understand, and to help you with that we've outlined a few guidelines below.</p> 
 
<h2>General Guidelines</h2> 
 
<p>Examples should be short, unique, self-contained snippets of code that illustrate var usage in the simplest possible way.</p> 
 
<ul> 
<li>Try to imagine clear conceptual boundries of your example before submitting it.</li> 
<li>Assume the reader has a background in software development, with little (but some) Clojure experience.</li> 
<li>Short, sweet, and complete is the name of the game.</li> 
</ul><p>If the target var is not part of the core ns (or otherwise not <code>use</code>d by default) please include the <code>use</code> / <code>require</code> statement.</p> 
 
<p>Bad:</p> 
 
<pre><code>user=&gt; (sh "ls" "-aul")
 
{:exit 0, 
 :out total 64
drwxr-xr-x  11 zkim  staff    374 Jul  5 13:21 .
...
</code></pre> 
 
<p>Good:</p> 
 
<pre><code>(use '[clojure.java.shell :only [sh]])
 
user=&gt; (sh "ls" "-aul")
 
{:exit 0, 
 :out total 64
drwxr-xr-x  11 zkim  staff    374 Jul  5 13:21 .
...
</code></pre> 
 
<p>Each example should be either broad, or deep, not both.  For example, the following example for <code>not=</code> shows the broad range of inputs allowed.</p> 
 
<pre><code>user=&gt; (not= 1 1)
false
 
user=&gt; (not= 1 2)
true
 
user=&gt; (not= true true)
false
 
user=&gt; (not= true false)
true
 
user=&gt; (not= true true true true)
false
 
user=&gt; (not= true true false true)
true
</code></pre> 
 
<p>Whereas this example for <code>future</code> has depth.</p> 
 
<pre><code>;; A future is calculated in another thread
user=&gt; (def f (future (Thread/sleep 10000) 100))
#'user/f
 
;; When you dereference it you will block until the result is available.
user=&gt; @f
100
 
;; Dereferencing again will return the already calculated value immediately.
user=&gt; @f
100
</code></pre> 
 
<p>Also, please mention any gotchas you feel are associated with your example (specifically) or the var (in general).</p> 
 
<h2>Comments</h2> 
 
<p>Comments should be used to describe the following code block or blocks and/or point out bits of information that may not be obvious to new Clojure devs.</p> 
 
<p>Bad:</p> 
 
<pre><code>user=&gt; (with-precision 10 (/ 1M 3))
0.3333333333M
 
user=&gt; (.floatValue 0.3333333333M)
0.33333334
</code></pre> 
 
<p>Good:</p> 
 
<pre><code>;; The "M" suffix denotes a BigDecimal instance
;; http://download.oracle.com/javase/6/docs/api/java/math/BigDecimal.html
 
user=&gt; (with-precision 10 (/ 1M 3))
0.3333333333M
 
user=&gt; (.floatValue 0.3333333333M)
0.33333334
</code></pre> 
 
<p><code>;;</code> should be for a general comment about a block of code, <code>;</code> should be used to add a comment to the end of a line of code.</p> 
 
<p>Bad:</p> 
 
<pre><code>; This function will print 'hello world' to the console
(defn hello-world []
  (println "hello world"))  ;; Does the actual printing
</code></pre> 
 
<p>Good:</p> 
 
<pre><code>;; This function will print 'hello world' to the console
(defn hello-world []
  (println "hello world"))  ; Does the actual printing
</code></pre> 
 
<p>Lines to be executed should start with <code>user=&gt;</code>, not <code>user&gt;</code>, or <code>&gt;</code>. This is to help new Clojure devs match up your code blocks to the REPL, and will help with automatic verification and reference analysis.</p> 
 
<p>Definitions (<code>def</code>, <code>defn</code>, <code>defmacro</code>, etc) and <code>use</code> / <code>import</code> / <code>require</code> statements can optionally leave out the <code>user=&gt;</code> and <code>#'user/whatever</code> output.</p> 
 
<p>Good:</p> 
 
<pre><code>;; You can use destructuring to have keyword arguments. This would be a pretty
;; verbose version of map (in an example a bit more verbose than the first above):
(defn keyworded-map [&amp; {function :function sequence :sequence}]
  (map function seq))
 
;; You can call it like this:
user=&gt; (keyworded-map :sequence [1 2 3] :function #(+ % 2))
(3 4 5)
 
;; The declaration can be shortened with ":keys" if your local variables should be
;; named in the same way as your keys in the map:
(defn keyworded-map [&amp; {:keys [function sequence]}]
  (map function sequence))
</code></pre> 
 
<p>Comments are not required for very simple examples.</p> 
 
<h2>Indentation / Formatting</h2> 
 
<p>Please follow the conventions outlined in this <a href="http://mumble.net/~campbell/scheme/style.txt">Scheme style guide</a>, which follows Emacs (among others) indentation and formatting conventions.  We realize that code style can often be largely dictated by personal preference, however, uniformity across examples on ClojureDocs is important.</p> 
 
<p>Lines should have a maximum width of 80 characters to prevent wrapping when displayed on ClojureDocs pages, and please indent with spaces, not tabs.</p> 
 
<p>Consider leaving one line of whitespace after output from the repl, which will make your examples easier to scan visually.</p> 
 
<p>Good:</p> 
 
<pre><code>user=&gt; (println "foo")
foo
nil
 
user=&gt; (println "bar")
bar
nil
 
user=&gt; (println "baz")
baz
nil
</code></pre> 
 
<p>Bad:</p> 
 
<pre><code>user=&gt; (println "foo")
foo
nil
user=&gt; (println "bar")
bar
nil
user=&gt; (println "baz")
baz
nil
</code></pre> 
 
<h2>Linking</h2> 
 
<p>Urls in examples source are automatically converted to links.  Feel free to use them where appropriate to link to external resources.</p>

</div>
</div>
</div>